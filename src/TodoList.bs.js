// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Item$ReactTemplate = require("./Item.bs.js");

var component = ReasonReact.reducerComponent("TodoList");

function empty_list(name) {
  return /* record */[
          /* id */( String(Math.random()) ),
          /* name */name,
          /* items : array */[]
        ];
}

function demo_list(num) {
  return /* record */[
          /* id */( String(Math.random()) ),
          /* name */"List " + String(num),
          /* items */Item$ReactTemplate.demo_items(/* () */0)
        ];
}

function demo_lists(num) {
  if (num !== 0) {
    return $$Array.append(/* array */[demo_list(num)], demo_lists(num - 1 | 0));
  } else {
    return /* array */[];
  }
}

function add_item(tl, n) {
  return /* record */[
          /* id */tl[/* id */0],
          /* name */tl[/* name */1],
          /* items */$$Array.append(tl[/* items */2], /* array */[Item$ReactTemplate.new_item(n)])
        ];
}

function move_item(tls, src_list_id, src_item_id, dest_list_id) {
  console.log(/* tuple */[
        "tls",
        tls
      ]);
  var src_lst = List.find((function (lst) {
          return lst[/* id */0] === src_list_id;
        }), $$Array.to_list(tls));
  console.log(/* tuple */[
        "src_lst",
        src_lst
      ]);
  var src_item = List.find((function (it) {
          return it[/* id */0] === src_item_id;
        }), $$Array.to_list(src_lst[/* items */2]));
  console.log(/* tuple */[
        "src_item",
        src_item
      ]);
  var dest_lst = List.find((function (lst) {
          return lst[/* id */0] === dest_list_id;
        }), $$Array.to_list(tls));
  console.log(/* tuple */[
        "dest_lst",
        dest_lst
      ]);
  return $$Array.map((function (lst) {
                if (lst[/* id */0] === src_list_id) {
                  var fltr = List.filter((function (it) {
                          return it[/* id */0] !== src_item_id;
                        }));
                  var filtered = $$Array.of_list(Curry._1(fltr, $$Array.to_list(lst[/* items */2])));
                  return /* record */[
                          /* id */lst[/* id */0],
                          /* name */lst[/* name */1],
                          /* items */filtered
                        ];
                } else if (lst[/* id */0] === dest_list_id) {
                  return /* record */[
                          /* id */lst[/* id */0],
                          /* name */lst[/* name */1],
                          /* items */$$Array.append(lst[/* items */2], /* array */[src_item])
                        ];
                } else {
                  return lst;
                }
              }), tls);
}

function setListRef(theRef, param) {
  param[/* state */1][/* listRef */2][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function setSortableRef(theRef, param) {
  param[/* state */1][/* sortableRef */3][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

function make(lst, onDragItem, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var js_set_data = (
      function(el, iid) {
        $(el).data('list-id', iid);
      }
    );
              Curry._2(js_set_data, self[/* state */1][/* listRef */2], self[/* state */1][/* todo_list */0][/* id */0]);
              var sortable_on_update = function ($$event, ui) {
                console.log(/* tuple */[
                      "event",
                      $$event
                    ]);
                console.log(/* tuple */[
                      "ui",
                      ui
                    ]);
                var js_get_src_item_id = (
           function (ui) {
           return $(ui.item).data('id');
           }
           );
                var js_get_src_list_id = (
        function (ui) {
          if(ui.sender) {
            return $(ui.sender).closest('.list').data('list-id');
          }
        }
      );
                var src_item_id = Curry._1(js_get_src_item_id, ui);
                var opt_src_list_id = Curry._1(js_get_src_list_id, ui);
                var src_list_id = opt_src_list_id !== undefined ? opt_src_list_id : self[/* state */1][/* todo_list */0][/* id */0];
                console.log(/* tuple */[
                      "src_item_id",
                      src_item_id
                    ]);
                console.log(/* tuple */[
                      "src_list_id",
                      src_list_id
                    ]);
                console.log(/* tuple */[
                      "self.state.todo_list.id",
                      self[/* state */1][/* todo_list */0][/* id */0]
                    ]);
                return Curry._3(onDragItem, src_list_id, src_item_id, self[/* state */1][/* todo_list */0][/* id */0]);
              };
              var js_set_sortable = (
      function (el, onUpdate) {
        $(el).sortable({
          connectWith: '.js-sortable',
          receive: onUpdate,
          over: function() { $('.placeholder').hide() },
          out: function() { $('.placeholder').show() },
          stop: function() { $('.placeholder').hide() },
        });
        return null;
      }
    );
              return Curry._2(js_set_sortable, self[/* state */1][/* sortableRef */3], sortable_on_update);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var itemsList = function (items) {
                return $$Array.mapi((function (_, it) {
                              return ReasonReact.element(it[/* id */0], undefined, Item$ReactTemplate.make(it, /* array */[]));
                            }), items);
              };
              return React.createElement("div", {
                          ref: Curry._1(self[/* handle */0], setListRef),
                          className: "level-item list"
                        }, React.createElement("div", {
                              className: "card"
                            }, React.createElement("header", {
                                  className: "card-header"
                                }, React.createElement("p", {
                                      className: "card-header-title"
                                    }, self[/* state */1][/* todo_list */0][/* name */1])), React.createElement("div", {
                                  className: "card-content"
                                }, React.createElement("div", {
                                      className: "content"
                                    }, React.createElement("div", {
                                          ref: Curry._1(self[/* handle */0], setSortableRef),
                                          className: "items js-sortable"
                                        }, React.createElement("div", {
                                              className: "columns placeholder",
                                              style: {
                                                display: "none"
                                              }
                                            }, React.createElement("div", {
                                                  className: "column"
                                                }, " ")), itemsList(self[/* state */1][/* todo_list */0][/* items */2])))), React.createElement("footer", {
                                  className: "card-footer"
                                }, React.createElement("div", {
                                      className: "field"
                                    }, React.createElement("div", {
                                          className: "control"
                                        }, React.createElement("input", {
                                              className: "input is-primary",
                                              value: self[/* state */1][/* new_item_name */1],
                                              onChange: (function ($$event) {
                                                  return Curry._1(self[/* send */3], /* ChangeNewItemName */Block.__(2, [$$event.target.value]));
                                                })
                                            }), React.createElement("a", {
                                              className: "button",
                                              onClick: (function () {
                                                  return Curry._1(self[/* send */3], /* AddItem */Block.__(1, [self[/* state */1][/* new_item_name */1]]));
                                                })
                                            }, "Add item"))))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* todo_list */lst,
                      /* new_item_name */"",
                      /* listRef : record */[/* contents */undefined],
                      /* sortableRef : record */[/* contents */undefined]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              switch (action.tag | 0) {
                case 0 : 
                    var init = state[/* todo_list */0];
                    return /* Update */Block.__(0, [/* record */[
                                /* todo_list : record */[
                                  /* id */init[/* id */0],
                                  /* name */action[0],
                                  /* items */init[/* items */2]
                                ],
                                /* new_item_name */state[/* new_item_name */1],
                                /* listRef */state[/* listRef */2],
                                /* sortableRef */state[/* sortableRef */3]
                              ]]);
                case 1 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* todo_list */add_item(state[/* todo_list */0], action[0]),
                                /* new_item_name */"",
                                /* listRef */state[/* listRef */2],
                                /* sortableRef */state[/* sortableRef */3]
                              ]]);
                case 2 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* todo_list */state[/* todo_list */0],
                                /* new_item_name */action[0],
                                /* listRef */state[/* listRef */2],
                                /* sortableRef */state[/* sortableRef */3]
                              ]]);
                
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.empty_list = empty_list;
exports.demo_list = demo_list;
exports.demo_lists = demo_lists;
exports.add_item = add_item;
exports.move_item = move_item;
exports.setListRef = setListRef;
exports.setSortableRef = setSortableRef;
exports.make = make;
/* component Not a pure module */
